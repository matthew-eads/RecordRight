See https://www.twilio.com/docs/quickstart/python/sms

I'm using virtualenv: see http://docs.python-guide.org/en/latest/dev/virtualenvs/
and I have a requirements file I'll try to keep up to date, so you can just 
pip install -r requirements.txt once you're in your venv

There seem to be two ways to use the API:
  1. Manually send/receive messages, we repeatedly 
     query the server for any incoming messages, and
     for each one, we process it, and manually send 
     a response.
  2. Create a server which will respond to HTTP requests, 
     a GET request from twilio will contain an SMS we are
     receiving, and then we send back a message to twilio.

Both are pretty simple, but I'm leaning towards working with 
the first method for now. It should be simple enough to switch though. 

EDIT: scratch that, on further research, it seems making some sort of server
is the best solution.

To make life easier, I've created Phone.py, which is a simple little script
to simulate sending/receiving texts. Basically, it connects with the 
Flask app Server.py on localhost. It then reads messages from stdin,
which it formats as a POST request and then sends them to the server,
and then prints the response. It tries to look just like the requests
that Twilio sends, so our server doesn't actually know if its sending 
messages to twilio, or just to our testing service. Because of this,
the server sends back xml responses, so we have to do a quick parsing of
the xml to make it a bit more readable.

Currently the server is very simple, it sets up a basic Flask app
which will receive GET/POST requests, and send back a Twilio-xml
formatted response.

I did a couple quick tests using my phone, and it does work! But its
a bit of a pain to make it available to the outside web, but once we 
have a more useful prototype we can spin off some heroku website or similar
and test it properly.

--------------------------------------------------------------------------------

So now we need to come up with a texting interface. In general there are only 
a couple things we want people to do: fetch existing data from their record,
and update that data. 

To fetch:

-------------------------------------------------------------help
Welcome to RecordRight, <patient_name>---------------------------
text '1' to fetch information from your record,------------------
'2' to update information in your record,------------------------
or '3' for more help.--------------------------------------------
----------------------------------------------------------------1
For notes from your recent visit, send '1',----------------------
for recent test results, send '2', to seach----------------------
for a different field, send '3' followed by the------------------
name of the field. Send '9' to quit this transaction.------------
----------------------------------------------------------------1
<RECENT NOTES>
Thanks, byeee.

So to keep track of a conversation, and where someone is in the
menu, we basically need to create a flowchart for each possible
interaction, and then enumerate each state. This number can
then be easily stored in the session cookie (which twilio stores
for us), and then used to determine what to do. 

For example, our process_message function would take in a couple
arguments, the message and the session 'number'